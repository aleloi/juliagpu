#include "bitmap.h"
#include <sstream>
#include <iomanip>
#include <cmath>  // For sin() and cos() functions

// Simple bitmap font data (5x7 pixel font)
const unsigned char font5x7[128][5] = {
    // ASCII 0-31: Control characters (displayed as blank)
    {0x00, 0x00, 0x00, 0x00, 0x00}, // 0x00 NUL
    {0x00, 0x00, 0x00, 0x00, 0x00}, // 0x01 SOH
    {0x00, 0x00, 0x00, 0x00, 0x00}, // 0x02 STX
    {0x00, 0x00, 0x00, 0x00, 0x00}, // 0x03 ETX
    {0x00, 0x00, 0x00, 0x00, 0x00}, // 0x04 EOT
    {0x00, 0x00, 0x00, 0x00, 0x00}, // 0x05 ENQ
    {0x00, 0x00, 0x00, 0x00, 0x00}, // 0x06 ACK
    {0x00, 0x00, 0x00, 0x00, 0x00}, // 0x07 BEL
    {0x00, 0x00, 0x00, 0x00, 0x00}, // 0x08 BS
    {0x00, 0x00, 0x00, 0x00, 0x00}, // 0x09 HT
    {0x00, 0x00, 0x00, 0x00, 0x00}, // 0x0A LF
    {0x00, 0x00, 0x00, 0x00, 0x00}, // 0x0B VT
    {0x00, 0x00, 0x00, 0x00, 0x00}, // 0x0C FF
    {0x00, 0x00, 0x00, 0x00, 0x00}, // 0x0D CR
    {0x00, 0x00, 0x00, 0x00, 0x00}, // 0x0E SO
    {0x00, 0x00, 0x00, 0x00, 0x00}, // 0x0F SI
    {0x00, 0x00, 0x00, 0x00, 0x00}, // 0x10 DLE
    {0x00, 0x00, 0x00, 0x00, 0x00}, // 0x11 DC1
    {0x00, 0x00, 0x00, 0x00, 0x00}, // 0x12 DC2
    {0x00, 0x00, 0x00, 0x00, 0x00}, // 0x13 DC3
    {0x00, 0x00, 0x00, 0x00, 0x00}, // 0x14 DC4
    {0x00, 0x00, 0x00, 0x00, 0x00}, // 0x15 NAK
    {0x00, 0x00, 0x00, 0x00, 0x00}, // 0x16 SYN
    {0x00, 0x00, 0x00, 0x00, 0x00}, // 0x17 ETB
    {0x00, 0x00, 0x00, 0x00, 0x00}, // 0x18 CAN
    {0x00, 0x00, 0x00, 0x00, 0x00}, // 0x19 EM
    {0x00, 0x00, 0x00, 0x00, 0x00}, // 0x1A SUB
    {0x00, 0x00, 0x00, 0x00, 0x00}, // 0x1B ESC
    {0x00, 0x00, 0x00, 0x00, 0x00}, // 0x1C FS
    {0x00, 0x00, 0x00, 0x00, 0x00}, // 0x1D GS
    {0x00, 0x00, 0x00, 0x00, 0x00}, // 0x1E RS
    {0x00, 0x00, 0x00, 0x00, 0x00}, // 0x1F US
    
    // ASCII 32-127: Printable characters
    {0x00, 0x00, 0x00, 0x00, 0x00}, // 0x20 (space)
    {0x00, 0x00, 0x5f, 0x00, 0x00}, // 0x21 (!)
    {0x00, 0x07, 0x00, 0x07, 0x00}, // 0x22 (")
    {0x14, 0x7f, 0x14, 0x7f, 0x14}, // 0x23 (#)
    {0x24, 0x2a, 0x7f, 0x2a, 0x12}, // 0x24 ($)
    {0x23, 0x13, 0x08, 0x64, 0x62}, // 0x25 (%)
    {0x36, 0x49, 0x55, 0x22, 0x50}, // 0x26 (&)
    {0x00, 0x05, 0x03, 0x00, 0x00}, // 0x27 (')
    {0x00, 0x1c, 0x22, 0x41, 0x00}, // 0x28 (()
    {0x00, 0x41, 0x22, 0x1c, 0x00}, // 0x29 ())
    {0x14, 0x08, 0x3e, 0x08, 0x14}, // 0x2a (*)
    {0x08, 0x08, 0x3e, 0x08, 0x08}, // 0x2b (+)
    {0x00, 0x50, 0x30, 0x00, 0x00}, // 0x2c (,)
    {0x08, 0x08, 0x08, 0x08, 0x08}, // 0x2d (-)
    {0x00, 0x60, 0x60, 0x00, 0x00}, // 0x2e (.)
    {0x20, 0x10, 0x08, 0x04, 0x02}, // 0x2f (/)
    {0x3e, 0x51, 0x49, 0x45, 0x3e}, // 0x30 (0)
    {0x00, 0x42, 0x7f, 0x40, 0x00}, // 0x31 (1)
    {0x42, 0x61, 0x51, 0x49, 0x46}, // 0x32 (2)
    {0x21, 0x41, 0x45, 0x4b, 0x31}, // 0x33 (3)
    {0x18, 0x14, 0x12, 0x7f, 0x10}, // 0x34 (4)
    {0x27, 0x45, 0x45, 0x45, 0x39}, // 0x35 (5)
    {0x3c, 0x4a, 0x49, 0x49, 0x30}, // 0x36 (6)
    {0x01, 0x71, 0x09, 0x05, 0x03}, // 0x37 (7)
    {0x36, 0x49, 0x49, 0x49, 0x36}, // 0x38 (8)
    {0x06, 0x49, 0x49, 0x29, 0x1e}, // 0x39 (9)
    {0x00, 0x36, 0x36, 0x00, 0x00}, // 0x3a (:)
    {0x00, 0x56, 0x36, 0x00, 0x00}, // 0x3b (;)
    {0x08, 0x14, 0x22, 0x41, 0x00}, // 0x3c (<)
    {0x14, 0x14, 0x14, 0x14, 0x14}, // 0x3d (=)
    {0x00, 0x41, 0x22, 0x14, 0x08}, // 0x3e (>)
    {0x02, 0x01, 0x51, 0x09, 0x06}, // 0x3f (?)
    {0x32, 0x49, 0x79, 0x41, 0x3e}, // 0x40 (@)
    {0x7e, 0x11, 0x11, 0x11, 0x7e}, // 0x41 (A)
    {0x7f, 0x49, 0x49, 0x49, 0x36}, // 0x42 (B)
    {0x3e, 0x41, 0x41, 0x41, 0x22}, // 0x43 (C)
    {0x7f, 0x41, 0x41, 0x22, 0x1c}, // 0x44 (D)
    {0x7f, 0x49, 0x49, 0x49, 0x41}, // 0x45 (E)
    {0x7f, 0x09, 0x09, 0x09, 0x01}, // 0x46 (F)
    {0x3e, 0x41, 0x49, 0x49, 0x7a}, // 0x47 (G)
    {0x7f, 0x08, 0x08, 0x08, 0x7f}, // 0x48 (H)
    {0x00, 0x41, 0x7f, 0x41, 0x00}, // 0x49 (I)
    {0x20, 0x40, 0x41, 0x3f, 0x01}, // 0x4a (J)
    {0x7f, 0x08, 0x14, 0x22, 0x41}, // 0x4b (K)
    {0x7f, 0x40, 0x40, 0x40, 0x40}, // 0x4c (L)
    {0x7f, 0x02, 0x0c, 0x02, 0x7f}, // 0x4d (M)
    {0x7f, 0x04, 0x08, 0x10, 0x7f}, // 0x4e (N)
    {0x3e, 0x41, 0x41, 0x41, 0x3e}, // 0x4f (O)
    {0x7f, 0x09, 0x09, 0x09, 0x06}, // 0x50 (P)
    {0x3e, 0x41, 0x51, 0x21, 0x5e}, // 0x51 (Q)
    {0x7f, 0x09, 0x19, 0x29, 0x46}, // 0x52 (R)
    {0x46, 0x49, 0x49, 0x49, 0x31}, // 0x53 (S)
    {0x01, 0x01, 0x7f, 0x01, 0x01}, // 0x54 (T)
    {0x3f, 0x40, 0x40, 0x40, 0x3f}, // 0x55 (U)
    {0x1f, 0x20, 0x40, 0x20, 0x1f}, // 0x56 (V)
    {0x3f, 0x40, 0x38, 0x40, 0x3f}, // 0x57 (W)
    {0x63, 0x14, 0x08, 0x14, 0x63}, // 0x58 (X)
    {0x07, 0x08, 0x70, 0x08, 0x07}, // 0x59 (Y)
    {0x61, 0x51, 0x49, 0x45, 0x43}, // 0x5a (Z)
    {0x00, 0x7f, 0x41, 0x41, 0x00}, // 0x5b ([)
    {0x02, 0x04, 0x08, 0x10, 0x20}, // 0x5c (\)
    {0x00, 0x41, 0x41, 0x7f, 0x00}, // 0x5d (])
    {0x04, 0x02, 0x01, 0x02, 0x04}, // 0x5e (^)
    {0x40, 0x40, 0x40, 0x40, 0x40}, // 0x5f (_)
    {0x00, 0x01, 0x02, 0x04, 0x00}, // 0x60 (`)
    {0x20, 0x54, 0x54, 0x54, 0x78}, // 0x61 (a)
    {0x7f, 0x48, 0x44, 0x44, 0x38}, // 0x62 (b)
    {0x38, 0x44, 0x44, 0x44, 0x20}, // 0x63 (c)
    {0x38, 0x44, 0x44, 0x48, 0x7f}, // 0x64 (d)
    {0x38, 0x54, 0x54, 0x54, 0x18}, // 0x65 (e)
    {0x08, 0x7e, 0x09, 0x01, 0x02}, // 0x66 (f)
    {0x0c, 0x52, 0x52, 0x52, 0x3e}, // 0x67 (g)
    {0x7f, 0x08, 0x04, 0x04, 0x78}, // 0x68 (h)
    {0x00, 0x44, 0x7d, 0x40, 0x00}, // 0x69 (i)
    {0x20, 0x40, 0x44, 0x3d, 0x00}, // 0x6a (j)
    {0x7f, 0x10, 0x28, 0x44, 0x00}, // 0x6b (k)
    {0x00, 0x41, 0x7f, 0x40, 0x00}, // 0x6c (l)
    {0x7c, 0x04, 0x18, 0x04, 0x78}, // 0x6d (m)
    {0x7c, 0x08, 0x04, 0x04, 0x78}, // 0x6e (n)
    {0x38, 0x44, 0x44, 0x44, 0x38}, // 0x6f (o)
    {0x7c, 0x14, 0x14, 0x14, 0x08}, // 0x70 (p)
    {0x08, 0x14, 0x14, 0x18, 0x7c}, // 0x71 (q)
    {0x7c, 0x08, 0x04, 0x04, 0x08}, // 0x72 (r)
    {0x48, 0x54, 0x54, 0x54, 0x20}, // 0x73 (s)
    {0x04, 0x3f, 0x44, 0x40, 0x20}, // 0x74 (t)
    {0x3c, 0x40, 0x40, 0x20, 0x7c}, // 0x75 (u)
    {0x1c, 0x20, 0x40, 0x20, 0x1c}, // 0x76 (v)
    {0x3c, 0x40, 0x30, 0x40, 0x3c}, // 0x77 (w)
    {0x44, 0x28, 0x10, 0x28, 0x44}, // 0x78 (x)
    {0x0c, 0x50, 0x50, 0x50, 0x3c}, // 0x79 (y)
    {0x44, 0x64, 0x54, 0x4c, 0x44}, // 0x7a (z)
    {0x00, 0x08, 0x36, 0x41, 0x00}, // 0x7b ({)
    {0x00, 0x00, 0x7f, 0x00, 0x00}, // 0x7c (|)
    {0x00, 0x41, 0x36, 0x08, 0x00}, // 0x7d (})
    {0x10, 0x08, 0x08, 0x10, 0x08}, // 0x7e (~)
    {0x00, 0x00, 0x00, 0x00, 0x00}  // 0x7f (DEL)
};

// Function to render a string using the bitmap font
void renderBitmapText(const std::string& text, float x, float y, float scale) {
    const float charWidth = 6.0f * scale;  // 5 pixels + 1 pixel spacing
    const float charHeight = 8.0f * scale; // 7 pixels + 1 pixel spacing
    
    glColor3f(1.0f, 1.0f, 0.0f);  // Yellow text
    glDisable(GL_TEXTURE_2D);
    
    float xPos = x;
    for (char c : text) {
        if (c < 0 || c > 127) c = '?';  // Handle non-ASCII characters
        
        // Draw each character bitmap
        for (int row = 0; row < 7; row++) {
            for (int col = 0; col < 5; col++) {
                if (font5x7[c][col] & (1 << row)) {
                    // Draw a pixel if the bit is set
                    glBegin(GL_QUADS);
                        glVertex2f(xPos + col * scale, y + row * scale);
                        glVertex2f(xPos + (col + 1) * scale, y + row * scale);
                        glVertex2f(xPos + (col + 1) * scale, y + (row + 1) * scale);
                        glVertex2f(xPos + col * scale, y + (row + 1) * scale);
                    glEnd();
                }
            }
        }
        
        xPos += charWidth;
    }
}

// Function to render debug information overlay
void renderDebugInfo(GLFWwindow* window, double viewX, double viewY, double viewWidth, double viewHeight, 
                    bool mouseDragging, bool leftButtonHeld, double offsetX, double offsetY,
                    const std::string& visualizationModeName, const std::string& fractalTypeName,
                    bool useJuliaFractal, double juliaRadius, double juliaAngle) {
    // Get current mouse position
    double mouseX, mouseY;
    glfwGetCursorPos(window, &mouseX, &mouseY);
    
    // Prepare debug strings
    std::stringstream ss;
    
    // Format coordinates with 4 decimal places
    ss.str("");
    ss << "View: X=" << std::fixed << std::setprecision(4) << viewX << ", Y=" << viewY;
    renderBitmapText(ss.str(), 10, 10, 1.5f);
    
    ss.str("");
    ss << "Size: W=" << std::fixed << std::setprecision(4) << viewWidth << ", H=" << viewHeight;
    renderBitmapText(ss.str(), 10, 30, 1.5f);
    
    ss.str("");
    ss << "Mouse: X=" << static_cast<int>(mouseX) << ", Y=" << static_cast<int>(mouseY);
    renderBitmapText(ss.str(), 10, 50, 1.5f);
    
    ss.str("");
    ss << "State: " << (mouseDragging ? "DRAGGING " : "") << (leftButtonHeld ? "BUTTON_HELD" : "");
    renderBitmapText(ss.str(), 10, 70, 1.5f);
    
    ss.str("");
    ss << "Mode: " << visualizationModeName << " | " << fractalTypeName;
    renderBitmapText(ss.str(), 10, 90, 1.5f);
    
    ss.str("");
    ss << "Offset: X=" << std::fixed << std::setprecision(4) << offsetX << ", Y=" << offsetY;
    renderBitmapText(ss.str(), 10, 110, 1.5f);
    
    if (useJuliaFractal) {
        ss.str("");
        double julia_cx = juliaRadius * cos(juliaAngle);
        double julia_cy = juliaRadius * sin(juliaAngle);
        ss << "Julia: c=" << std::fixed << std::setprecision(4) << julia_cx << "+" << julia_cy << "i";
        renderBitmapText(ss.str(), 10, 130, 1.5f);
    }
} 